# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float, filter: DocumentFilter): DocumentConnection!
  getDocumentFields: JSON!
  getDocsDocument(relativePath: String): DocsDocument!
  getDocsList(before: String, after: String, first: Float, last: Float, filter: DocsFilter): DocsConnection!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input DocsBodyCalloutFilter {
  type: StringFilter
  text: StringFilter
}

input DocsBodyButtonFilter {
  type: StringFilter
  text: StringFilter
  url: StringFilter
}

input DocsBodyVideoPlayerFilter {
  url: StringFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input DocsBodyHeroFilter {
  backgroundImageUrl: ImageFilter
  slogan: StringFilter
  teaser: StringFilter
  btnUrl: StringFilter
  btnTxt: StringFilter
}

input DocsBodyFeatureSectionFeatureListFilter {
  image: ImageFilter
  title: StringFilter
  desc: StringFilter
}

input DocsBodyFeatureSectionFilter {
  featureList: DocsBodyFeatureSectionFeatureListFilter
}

input DocsBodyFilter {
  Callout: DocsBodyCalloutFilter
  Button: DocsBodyButtonFilter
  VideoPlayer: DocsBodyVideoPlayerFilter
  Hero: DocsBodyHeroFilter
  FeatureSection: DocsBodyFeatureSectionFilter
}

input DocsFilter {
  title: StringFilter
  slug: StringFilter
  section: StringFilter
  body: DocsBodyFilter
}

input DocumentFilter {
  docs: DocsFilter
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = DocsDocument

type Docs {
  title: String
  section: String
  body: JSON
}

type DocsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Docs!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type DocsConnectionEdges {
  cursor: String
  node: DocsDocument
}

type DocsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateDocsDocument(relativePath: String!, params: DocsMutation!): DocsDocument!
  createDocsDocument(relativePath: String!, params: DocsMutation!): DocsDocument!
}

input DocumentMutation {
  docs: DocsMutation
}

input DocsMutation {
  title: String
  section: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  